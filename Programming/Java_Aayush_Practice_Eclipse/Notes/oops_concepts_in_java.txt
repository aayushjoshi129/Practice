	OOPS CONCEPTS IN JAVA

*  Constructors = are used to create new objects
	 
	 *  Static Keyword means it is an class property not an object property (use it when you don't need to change the variable with reference to objects)
	 
	 *  this() calls its same constructor means here it is calling Person()	after then it Person(args) get executed	
	 
	 *  INHERITANCE = Child Inherits property of parent classes that is what Inheritance is called. (IS A RELATIONSHIP)
		** JAVA Doesn't allow Multiple Inheritance
		* Just to tackle multiple inheritance JAVA Interfaces is introduced
		
		
	 *  super() keyword is used to call its parent's constructor
	
	 *  POLYMORPHISM = Same method can be act in N different ways
	
	 	*  Compile time Polymorphism is that when it checks functions during compiling as done is Walk functions (called function walk with args as args is given)
	 	*	Run Time Polymorphism is that when it checks functions during Run time as done in Walk in Developer Class (called its own walk during runtime)
	
	 * ENCAPSULATION = used for data hiding / data protection / it means enscapsulating all methods and properties together in a capsule.
	  
	 * PACKAGES AND ACCESS MODIFIERS
	 	
	 	* PACKAGES can be called as folder like structure but can achieve many functionalities such as making a method private(accessed within a class) or public(accessed everywhere) or default(accessed in a package only) or protected(accessed only by childrens irrespective of access location)
	 	* methods accessing powers is known as access modifiers such as private(accessed within a class) or public(accessed everywhere) or default(accessed in a package only) or protected(accessed only by childrens irrespective of access location)
	
	 * Getters function use to get the value of particular variable
	 
	 * Setters function use to set the value of particular variable or method	
	 
	 * ABSTRACTION = It enables data hiding and security (hides all content from the users and just providing the facilities)
	  	example : A normal user can signup at Facebook without having knowledge of how data is being stored in database at Backend
	 
	 	* Abstract is used when we know that it cannot create any object it's just a concept kind of thing so we use abstract keyword
	 
	 	*  It is necessary to abstract the class of the abstract function , it is impossible to make any function abstract without making a class abstract
	  
	 * INTERFACE An interface in Java is a blueprint of a class. It has static constants and abstract methods.

		* The interface in Java is a mechanism to achieve abstraction. There can be only abstract methods in the Java interface, not method body. It is used to achieve abstraction and multiple inheritance in Java.
		* Java Interface also represents the IS-A relationship. It provides true abstraction
	
	* ABSTRACTION AND INTERFACES difference between them is that in Abstraction you can specify the body of the method but in interface you cannot specify its body.
		* Interfaces provides True Abstraction